---
author: atsushi
date: 2016-07-31
id: devsumi-2016-report
title: "デブサミレポート「モバイル用Webフレームワーク最前線」"
product: monaca
tags: devsumi,monaca,cordova
category: レポート
---

先日[Developers Summit（通称デブサミ）](http://event.shoeisha.jp/devsumi/20160218/)にて当社代表の田中が登壇しました。こちらはそのレポートになります。

![](/blog/content/images/2016/Jul/file030.jpg)

## 統計でみるJavaScript

これは二ヶ月程前にビジョンモバイルから出された資料（下の画像）ですが、毎年行われている開発者が使っている言語・技術のアンケートになります。資料の左側がモバイル開発者、右側がクラウド開発者です。左側を見ると資料ではXXXscriptと書いてありますが、CoffeeScriptやTypeScriptなどJavaScript互換のWeb技術が引き続き高いシェアを占めているのが見て取れます。この次がJava、C、C#、Objective-Cとなっています。

![](images/devsumi-slide-4.jpeg)

### JavaScriptは汎用的な言語へ

それでは、JavaScriptが他の統計ではどうなっているのかを見ていきます。[Stack overflow](http://stackoverflow.com)の調査ですが、サイト内でどの言語についての質問が多いかのランキングになります。こちらも毎年出されています。この資料ではJavaScriptのシェアが一番高く約85%です。一方、右側を見ると、5年前の同じ調査ではJavaScriptは56%だったのがわかります。SQLやPHPのシェアは現在とあまり変わっていませんが、JavaScriptはグンと伸びています。JavaScriptは昨今のプログラミング業界の中で普遍的な言語というか、汎用的な言語として使われてきていると言えるでしょう。

この結果、様々なフレームワークが出てきています。新しいフレームワークが出てきてから次のフレームワークが出てくるまでの間がどんどん短くなってきていて、それぞれ独自の特徴を持っているのです。Webフレームワークの全体像がなかなか掴みづらいという部分も関係しているかと思います。

![](images/devsumi-slide-5.jpeg)


先ほどのStack overflowの調査ですが、具体的に何について質問しているかがわかるように、質問に付いているタグの順番に並べてみました。ダントツトップなのがjQueryで、その次がAngular.js。これもJavaScriptです。その次がCordovaでした。そのあとはjQuery Mobile、Ext.js、Backbone.js、React.jsと続いていきます。質問数なので、どちらかというと課題が多いフレームワークの数値が高くなる傾向はあります。また、jQueryは登場時からだいぶ期間が経っていて、2008年頃からすでに7〜8年は使われています。一方Angular.jsは2011年か2012年頃に出てきていますが、ここまでメジャーになったのはつい最近です。この表は質問数の累計なので、出てきてからの期間が長いフレームワークの数字が高くなる傾向があります。

![](images/devsumi-slide-7.jpeg)

### 検索でのJavaScript

次は今人気の言語をGoogle Trendを使って調べてみたものです。特にメジャーどころであるjQueryとAngular.jsの2つを中心に見ていきます。検索トレンドで言うとjQueryはかなり下降トレンドになってきています。一方Angular.jsは徐々に上がり下がりを繰り返しながら、jQueryに近いところまで検索されてきています。

![](images/devsumi-slide-8.jpeg)

この表がある程度の実感値を表すものとすると、jQueryやAngular.js、Node.jsが今使われている技術と言えるでしょう。グラフの青色の線がBackbone.jsです。一時期は日本でも使われていましたがBackbone.jsがAngular.jsに取って変わっています。Backbone.jsは安定的に検索されているのに対して、黄色いのがReactでシェアが高まってきています。

これはUS中心の検索ボリュームで、必ずしも日本や全世界で同じ傾向とは言えません。私の実感としては、このグラフは実際のシェアに近いものがあり、AngularやReactがフレームワークでも抜きん出てきている状況が見えます。この勢いは今後止まるのかと思うのではないでしょうか。実際は勢いが止まることはないのではと思います。JavaScriptとは常に進化し続ける言語だからです。

## JavaScriptの進化

2013年頃にChromeが元々Safariと同じブラウザエンジンWebKitからBlinkに切り替えました。その後からWeb標準を推進する機運が強まっていきました。マイクロソフトの作ったTypeScriptは2014年に登場しています。ECMAscriptについては、ES6あたりから毎年変えていくから年数で呼ぼうとES2015と呼ぶようになりました。

![](images/devsumi-slide-9.jpeg)

現在、ES2016の仕様が出てきていてFirefox、ChromeなどではES2016の機能の一部が取り込まれています。今年の終わり頃にHTML5.1が勧告予定です。JavaScriptやHTMLはどんどん進化を続けており、特にこの進化を加速させているのがNode.jsだと思っています。

Node.jsというとサーバーサイドのソフトウェアを作ると思われがちですが、Node.jsはWindowsやMacにインストールしてその上で開発することが幅広く行われています。そうなるとブラウザに依存することがほぼ無くなります。これまでの一番のネックだったブラウザの対応状況に左右されることがなくなり、最新のJavaScriptやAlt.jsを積極的に使う流れになってきていています。

### JavaScriptからUniversal JavaScriptへ

ブラウザで使われていた言語だったJavaScriptがUniversal JavaScriptとなって、ユニバーサルな言語に進化すると捉えられています。元々クライアントサイドのJavaScriptはNode.jsというローカルで動く環境の登場により、JavaScriptトランスパイラを生み出しました。そしてBrowserify、TypeScript、CoffeeScriptなどを組み合わせ、クライアントサイドで実行されます。

![](images/devsumi-slide-10.jpeg)

クライアントサイドもサーバーサイドもどちらでも使える点がJavaScriptのメリットで、最近ではブラウザ上でスクリプトタグでかいていくのではなく、ソースコードを書きながらES6やTypeScriptで書いて、それをトランスパイルして、ES5などブラウザでサポートしているJavaScriptに変換して動かします。この方式がディベロッパーの中ではかなり身近になってきています。

## JavaScriptフレームワークの3世代

JavaScriptのフレームワークは三つの世代に分かれます。

先ほど説明したとおりjQueryのシェアが下がり、ReactやAngularがどんどん上がっているのには理由があります。jQueryが元々解決しようとしていた課題はクロスブラウザの対応でした。例えばFirefoxやIEなどブラウザがそれぞれ別の命令セットやAPIを持っており、全てのブラウザで動かすことがそもそも難しかったのです。その解決とAjaxなどの面倒なところをjQueryが解決してきました。それがIEなどの互換性が向上したり、ブラウザ自身にクエリセレクタなどの様々なAPIが登場したりして、jQuery自体が必要なくなってきたことがあります。

![](images/devsumi-slide-11.jpeg)

次に求められるのが、もう少し大規模なプログラムを作っていきたいという要望です。これはシングルページアプリケーション（SPA）という考え方が根底にあります。これまではサーバーサイドでレンダリングして、ページを移るたびに全てのHTMLを返していくというタイプのアプリケーションだったのが、アプリケーションをダウンロードしたら中でどんどん変わっていくという、GmailなどGoogleのサービスでお馴染みのものです。SPAはクライアントサイドのコードが増えてしまいます。簡単にDOMを操作しなくても書けるようにバインディングという仕組みをAngular.jsが生み出しました。これが第二世代と言えます。特にここからモバイルも関わってきます。

モバイルは進化してきたとはいえ課題はあります。Angular1の頃には、特にバインディング処理が重かったため、Angularで作ると遅い&重いといった課題がありました。それを解決するためにReactやAngular2が登場します。AngularやBootstrapのモジュール化やソースコードをより構造的に作っていく形をサポートしつつも、そのソースコード自体をES6の新しい書き方に合わせて書けるようにし、より速度を出せるようにしています。特徴的なのが仮想DOMと言われる仕組みです。

### 仮想DOMとReact

仮想DOMはここ数年以内に出てきたフレームワークはだいたいが持っている機能です。DOMは御存知の通り、ドキュメントオブジェクトモデルといってブラウザの中でHTMLを読み込んだ時にそのHTMLをブラウザが解釈をします。HTMLはツリー構造ですが、これをDOMツリーと呼んでいます。以前はブラウザがそのままHTMLを読込、表示していたのでDOMツリーに仮想、リアルの概念がありませんでした。React.jsが概念として追加したのが、DOMツリーを仮想的にメモリ中に構築していく考え方です。

![](images/devsumi-slide-15.jpeg)

乱暴な例なんですが、左側の例が仮想DOMのイメージです。コンポーネントを自分たちで作りますと、例えばページが見えた時のヘッダー部分はヘッダーコンポーネント、ページ全体はページコンポーネント、その中はリストコンポーネントとします。要は自分でコンポーネントを作ることができるんです。これらを仮想DOMとして定義しておいて、Reactがそれをレンダリングするときに、headerタグに変えたり、divに変えたりします。

エンジニアがプログラムのデザインとビューを構造化したいと思った時に、自分たちでコンポーネントを定義して、その中に本来のDOM定義をして、ツリー状にしていくことでアプリケーションができるという考え方がReactのポイントです。

仮想DOMの考えは、自分たちでコンポーネントを定義できること以外にもメリットがあります。例えばコンポーネントにプロパティを持たせられます。ヘッダーにログインした人の名前を出したいとすると、それが属性として渡すことができるので、コンポーネントの定義が非常にわかりやすくできます。数あるメリットの中で、モバイルに一番インパクトのあるメリットは仮想DOMでレンダリングスピードが飛躍的に速くなることです。

## HTML更新の3方法

どういうことかというと、以下の図をご覧ください。このようにDOMツリーがあります。bodyに2つのdivがあって、divの下に今1つだけh1があります。ここにもう1つ、h1を追加したいとなったときを考えます。このケースで仮想DOMを使う方法、使わない方法で3通りのやり方が考えられます。

![](images/devsumi-slide-16.jpeg)

### 1.サーバーサイドレンダリング

一番左側はサーバーサイドレンダリングです。ページを全てリロードしてサーバーが新しいDOMの構造を返すことで、クライアントは全てをレンダリングします。一番負荷も時間も掛かります。それだけでユーザーの体験を失わせてしまいますが、10年前はこれが当たり前でした。

### 2.DOMを明示的に作成

Ajaxが広まり、特にjQuery世代ではappendChildやDOMの命令を駆使して、divの下に自分で追加します。これをDOMを弄るといいますが、自分で明示的に作っていきます。

### 3.仮想DOM

仮想DOMになると何が変わるかというと、Reactが管理している自分のコンポーネントのステートメントだけを変えることになります。ブラウザ自体にはDOMをいじらないというのがReactの原則です。Reactは自分のメモリの空間の中に本来あるべき仮想DOMを持っているので、どのDOMを変えるかを知っています。Reactは仮想DOMを変更すると本当に変更しないといけない場所を計算で求めて、そこだけをアップデートします。サーバーサイドレンダリングと比べたら遥かに速く、Ajaxを使ったやり方より遥かに簡潔に、かつ素早くコンポーネントの変更をDOMに伝えられます。

## 仮想DOMフレームワーク

仮想DOMについては慣れてくるとわかりやすくなりますが、Reactを使うのはなかなか難しいと思います。最近は仮想DOMをサポートするフレームワークが出てきました。日本で人気なのはRiotで、Reactに代わるシンプルな実装の仮想DOMのフレームワークです。もう一つviewJSがバージョン2から仮想DOMをサポートするようになりました。個人的にこれから使われてくるフレームワークだと思います。このような仮想DOMフレームワークが大きなキーワードとなってくるでしょう。特にモバイルWebアプリを作るときにはパフォーマンスが一番気になりますので、いかに速くユーザーのやりたいインタラクションをDOMに変えていくかが肝になります。それも仮想DOMのライブラリを使うことで有効に使えます。

![](images/devsumi-slide-17.jpeg)

仮想DOM世代のフレームワークの登場で、これまでベストプラクティスと言われていたMVCの構造自体も見直しがされてきています。ReduxやMobXなどのフレームワークが出てきていますけど、このような新しいステート管理手法を使うことで、プログラムがシンプルに書けます。仮想DOMフレームワークを使うときには、これまでのモデルやコントローラーといった考え方も抜本的に変わり、MobXなど新しいフレームワークで開発をしていくことがベストプラクティスと言われてきています。FacebookのアプリケーションもReduxとReactを使って大規模なものが作られていると聞いています。

# モバイルWebの進化

![](images/devsumi-slide-19.jpeg)

モバイルWebも登場時に比べると遥かに進化しています。WindowsとAndroidとiOS、いずれもHTML5との親和性が高いです。端末スペックも5年前に出たスマートフォンの約20倍のスペックがあり、十分に高速で大容量です。みなさんが作られる業務アプリケーションを普通に作る分には全然問題ないスペックです。

さらにAndroidでは、Android5.0からブラウザのコンポーネントも自動更新の対象になりました。これまでAndroid4以前は一回リリースされたWebViewはベンダーがOSアップデートするまで変わらず、WebViewに脆弱性が生まれてしまうと、解決するができませんでしたが、VebViewがGooglePlayストアで配信されるようになりました。WebViewのフラグメンテーションも回避されるようになりました。

さらに推し進めて、GoogleはProgressive Web Appsというスローガンで、モバイルWebの体験をネイティブアプリに近づける方針です。サービスワーカーというブラウザのバックグラウンドで動く実行エンジンやプッシュ通知を使って行います。最新のAndroid版Chromeにはこのような機能が含まれています。こういった形でモバイルWebも進化しているわけです。

![](images/devsumi-slide-20.jpeg)

モバイルでのJavaScriptの使い方ですが、2パターンあります。一つはWebアプリです。ChromeやSafari上で動いて、その上JavaScriptも動きます。PCのwebサイトでアプリを使うのと全く同じです。

もうひとつはイブリッドアプリです。CordovaやReactのハイブリッドアプリ版であるReact Nativeというフレームワークが登場したりして、改めて注目されています。基本的にはJavaScriptを書くところは同じですが、ブラウザはなく、一つのアプリケーションとしてパッケージングされます。Cordovaの場合はブラウザが内包されているようなイメージになります。React Nativeではブラウザではなくて、iOSやAndroidの中でネイティブの実行エンジンが走ります。こうした技術を使うことで、Webアプリだとネイティブ機能へのアクセスは制限出る点をハイブリットアプリでクリアします。

CordovaとReact Nativeはやりたいことは似ていて、JavaScriptという言語を使って、共通プラットフォームのアプリを作ります。CordovaはレンダリングをWebViewで行います。画面はHTML5で作られます。一方、React NativeはブラウザのUIをJavaScriptでラッピングします。アプリ自体はJavaScriptで書いて、JavaScriptのエンジンで動きますが、UIコンポーネントはHTMLではなくReact Native用のUIコンポーネントを使います。

![](images/devsumi-slide-21.jpeg)

大きく異なるのがクロスプラットフォームに対する考え方です。Cordovaはブラウザ型のコンポーネントなので、AndroidでもiOSでも全て問題なく動く完全なクロスプラットフォームです。対してReact Nativeは「Learn once write anywhere」と言われてて、一回学んだらどのプラットフォームでも書けるようになり、OSのプラットフォームに最適化が求められます。そこが大きな違いです。

## モバイル開発の課題

![](images/devsumi-slide-22.jpeg)

### 1.フレームワーク選定

課題というよりは決めの問題かもしれませんが、フレームワークはJavaならStruts、PHPならCakePHPなど息の長いフレームワークがあります。一方でJavaScriptは技術の流行り廃りが短いです。おそらく5年後にはよりJavaScriptの進化に追随できているフレームワークが主流になっているでしょう。仮想DOMを持っているReactとかAngular.jsを使うのは理にかなっていますが、プロジェクトごとにどのフレームワークを使うかを検討が必要です。

### 2.UI実装

UI実装はモバイルに関して言うと実は難しいです。モバイル開発ではここがかなりの課題だと思っています。

まずは、フラットデザインとマテリアルデザインという2つの違ったデザインがあって、一から自分たちで作っていくのは困難です。見た目だけでなく、エフェクトもあります。Androidであれば、ボタンをタップするとパッと開くリップルエフェクトだったり、アニメーションのスライド方法まで全然違います。一つ一つ作りこんでいくのはかなり工数もかかりますし、非現実的です。

モバイルのみで使われるコンポーネントが多いです。ページスタックの管理やハンバーガーメニューなどのモバイル特有のデザインや無限スクロール、スワイプ操作などのタッチを使うものなどもあり、見た目だけでなく実装は難しいです。

![](images/devsumi-slide-23.jpeg)


### 3.ツール・デプロイ・デリバリー

三つ目はクロスプラットフォームでAndroidとiPhoneでアクセスした時にそれぞれのOSに合わせたデザインを出す必要があります。

そこで、[Monaca](https://ja.monaca.io/)で開発している [Onsen UI](https://ja.onsen.io) があります。モバイルのアプリとしても使えますし、Cordovaなどでラッピングして、ハイブリッドアプリとして使うこともできます。AndroidやiPhoneのUIをクロスプラットフォームで作る機能を持っており、AndroidやiPhoneが完全に同じコードで別々のUIに最適化しています。プログレスバーやフローティングラベルなど、様々なモバイルのUIのコンポーネントを持っています。モバイルで触るとスムーズなアニメーションをするのがわかってもらえます。

![](images/devsumi-slide-27.jpeg)

MonacaではOnsen UIを組み合わせて、ネイティブアプリを作れます。デバッガーで簡単に実機確認ができるのも特徴です。触ってみていただけると新しいウェブアプリケーションの潮流がわかるかと思います。無料プランもありますので、ぜひお試しください。
