---
author: patrick
date: 2016-05-25
id: onsen-ui-cordova-react
title: "Building Cordova apps with React Components for Onsen UI"
category: tutorial
tags: onsen ui, monaca cli, interactive tutorial, react, autostyling
---

![Onsen UI environment](/blog/content/images/2016/May/cordova_picture.png)

With [Cordova](https://cordova.apache.org/) it is easy to build functional hybrid apps for all the major mobile platforms, including Android, iOS and Windows Phone. However, making the apps look good is a much harder task. Luckily, with the help of the [Monaca CLI](https://monaca.io/debugger.html) and [React Components for Onsen UI](https://onsen.io/v2/react.html) this became much easier. In this blog post we are going to look at some benefits of using these technologies.

<!-- more -->

### What is React?

React is a library that help developers to structure and manage their JavaScript applications. A React application consists of classes called *components*.  Every component needs to implement a *render* function. Here is a small example of how this might look like:

```jsx
var Example = React.createClass({
  render: function() {
    return (
       <div>Our first React example</div>
    );
  }
});

ReactDOM.render(<Example />, document.getElementById('content'));
```

What this code does is that is searches for the element with the id `content` in our html DOM tree and renders the React component inside it. In our example the component will render to `<div> Our first react example </div>`. React uses a special syntax, called [JSX](https://facebook.github.io/react/docs/jsx-in-depth.html). JSX is basically an extension of JavaScript that enables us to create React components and HTML elements in a more readable way.

Every React component has so called *properties* (props) and *states*. Let us look at properties first. A property enables us to make the rendering of a component configurable. For example, we could make the text content of a component dependent on a property:

```jsx
var Example = React.createClass({
  render: function() {
    return (
       <div>{this.props.text}</div>
    );
  }
});

ReactDOM.render(
  <div>
    <Example text='first' />
    <Example text='secont' />
  </div>,
  document.getElementById('content')
);

```
With this code, a `div` with two internal `div`s will be rendered into the DOM. The first `div` will contain the text "first" while the other `div` will contain the text "second". These properties make it easy to reuse components and save a lot of code.

What makes React so powerful is the called `state`. One can think of the state as a class variable that influences the rendering: Every time the state changes, the component is rerendered.

Lets have a look at an example. Imagine we want to build a simple counter component. This component should consist of a text and a button. The state of the application is the counter number. Initially it is 0 and every time the button is pressed, it is increased by one. Each time the button is pressed, the counter is increased. The counter number will be displayed as the text. The corresponding code is quite simple:

```jsx
var Counter = React.createClass({
  getInitialState: function() {
    return {counter: 0};
  },
  increaseCounter: function() {
    this.setState({
      counter: this.state.counter + 1
    });
  },
  render: function() {
    return (
      <div>
        <div> {this.state.counter} </div>
        <button onClick={this.increaseCounter}> Add </button>
      </div>
    );
  }
});
```

Here is what the example looks like:

<iframe width="320" height="60" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);" src="https://philolo1.github.io/react-simple-counter/"></iframe>

The fact that React re-renders every time the state changes, might sound like a slow process, but actually it is quite fast. This is because React does not re-render everything, but only those elements whose properties have changed. React uses the concepts of so called [Virtual DOM](https://facebook.github.io/react/docs/glossary.html) and and an [advanced diff algorithm](http://calendar.perfplanet.com/2013/diff/) to determine which elements have changed and only renders those. With this concept, React is able to determine what changes have been made to the DOM and rerender only what is necessary.

To learn more about React, we recommend to have a look at the [official website](https://facebook.github.io/react/).

### What is Onsen UI?

React is a pretty great library to write structured and efficient code, but it does not provide any UI components. This is where Onsen UI comes in. We have created many components with mobile feel like Navigation, Tabbar, Splitter (Side Menu) and tons of other componets. These components styles [are automatically dependant on the platform](https://onsen.io/blog/auto-style-app-onsen/). These components integrate flawlessly with React.

With just a few hundred lines of code we can build a simple login sample app, that will look like this:

<div style="display: flex; justify-content: center;">
<iframe src="https://philolo1.github.io/frame-auto-style/?platform=ios&src=https://philolo1.github.io/OnsenUI-React-Login-Sample-Screen/www/index.html" scrolling="no" style="border: 0; width: 400px; height: 800px;"></iframe>
</div>

Here is the entire Javascript/React source code:

```jsx
import React from 'react';
import ReactDOM from 'react-dom';
import {
  Page,
  Button,
  Toolbar,
  Icon,
  Input,
  ToolbarButton,
  Row
} from 'react-onsenui';

// load Onsen UI library
import ons from 'onsenui';

var LoginPage = React.createClass({
  getInitialState: function() {
    return {
      email: '',
      password: ''
    };
  },

  signIn: function() {
    ons.notification.alert({
      message: `You entered '${this.state.email}' & '${this.state.password}' `
    });
  },

  forgotPassword: function() {
    ons.notification.prompt({
      message: 'What is your email?',
      callback: function(email) {
        ons.notification.alert({
          message: 'The new password will be send to ' + email
        });
      }
    });
  },

  emailChange: function(event) {
    this.setState({
      email: event.target.value
    });
  },

  passwordChange: function(event) {
    this.setState({
      password: event.target.value
    });
  },

  render: function() {
    let toolbarButton;

    if (!ons.platform.isAndroid()) {
      toolbarButton = <ToolbarButton onClick={this.signIn}>
        <Icon icon={{default: 'ion-log-in'}} />
      </ToolbarButton>;
    }
    return (
       <div class="tile">
         <Page id="login"
           renderToolbar={() =>
             <Toolbar>
               <div className="center">Login</div>
               <div className="right">
                 {toolbarButton}
               </div>
             </Toolbar>
           }>

           <img id='logo' src='img/logo_react.png' />
           <div id='logoTitle'>
             <img src='img/logo_title.png' />
           </div>

           <Input value={this.state.email} onChange={this.emailChange} placeholder="Email" type="text" modifier="underbar" float />
           <Input value={this.state.password} onChange={this.passwordChange} placeholder="Password" type="password" modifier="underbar" float />
           <Button id='signIn' onClick={this.signIn} modifier="large">Sign In</Button>
           <Button id='forgetBtn'  onClick={this.forgotPassword} modifier="quiet">FORGOT PASSWORD?</Button>
          </Page>
        </div>
    );
  }
});

ReactDOM.render(<LoginPage />, document.getElementById('app'));
```

The page contains two input fields: one for the email and one for the password. The internal state consists of the password and email. Furthermore, there is a login button. When the login button is clicked, the onClick property is called, which is bound to the classes with the *signIn* function. We use [ons.notification](https://onsen.io/v2/docs/js/ons.notification.html) to show a simple information dialog after showing the page. To make the app look good, we also added some CSS, and the full code of the app can be found in our [repository](https://github.com/philolo1/OnsenUI-React-Login-Sample-Screen).

To learn more we highly recommend our [tutorials](http://tutorial.onsen.io/?framework=react&category=Getting%20started&module=Using%20the%20components).

### What is Monaca?

Monaca is a toolset that enables the entire hybrid app development progress from setting up the the project to deploying the app on the device.

To get started we first need to install the [Monaca CLI](https://monaca.io/debugger.html), which will be used to create/build and preview the Cordova project.

```
$ npm install -g monaca
```

Now we will create a simple sample app by typing `monaca create sample` and choose React and the *Navigation example*.

![cli steps](/blog/content/images/2016/May/cli_create.png)

To run the project in the end we can simply run the following commands:

```
$ cd sample
$ monaca preview
```

Monaca CLI has many more tools and options. To see all of them type `monaca --help`.  In additon to the command line interface, Monaca provides many other services and tools like a fully functional cloud based IDE. Check out [the website](https://monaca.io) for more info.

### Conclusion

React is a great framework for building fast and structured Javascript applications. The usage of Onsen UI and Monaca can improve the development experience of Cordova development. Give it a try and tell us what you think. We have a great [community](https://community.onsen.io/) that is eager to help you with all the questions you might have. Its also worth to check out our open source repo for [Onsen UI](https://github.com/OnsenUI/OnsenUI) and the [React Components](https://github.com/OnsenUI/react-onsenui).
