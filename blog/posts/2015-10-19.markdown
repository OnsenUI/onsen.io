---
author: onsen
date: 2015-10-19
id: create-your-kintone-app-using-monaca
title: "Create your Kintone app using Monaca"
tags: tutorial, javascript, cordova, onsen ui, monaca, kintone
---

Kintone by Cybozu lets you quickly and easily build your own customized business applications such as daily reports, minutes, time-card, and surveys. It also lets you create applications using Excel or CSV files to satisfy your own needs.

Kintone provides a lot of features on web browser though we focused on developping further using Kintone API and Monaca to transform your custom business application into a hybrid mobile application.

<!-- more -->

#### What you need

* [kintone](https://www.kintone.com/) account (30-day trial)
* [Monaca](https://monaca.io/) account (Free)

#### Creating Sales Records Management System

In this blog post, we are creating sales records management system. 
Let's go ahead and create minimum template project in Monaca IDE.

![Monaca Minimum Template](/blog/content/images/2015/Oct/monaca_minimum_template.png)

Next, navigate your cursor to "Config" and select "Manage JS/CSS Components" 

![Manage JS/CSS Components](/blog/content/images/2015/Oct/monaca_manage_components.png)

Then, add Onsen UI into the project. At the time of this writing, most recent version of Onsen UI is 1.3.11.

![Add Onsen UI Component](/blog/content/images/2015/Oct/monaca_adding_onsenui.png)

#### Modify HTML

Now, we can modify our index.html file as shown below.

We added "myApp" module for AngularJS as well as Onsen UI.

```html
<!DOCTYPE HTML>
<html ng-app="myApp" lang="ja">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <script src="components/loader.js"></script>
    <link rel="stylesheet" href="components/loader.css">
    <link rel="stylesheet" href="css/style.css">
    <script>
        var myApp = angular.module('myApp', ['onsen']);
    </script>
</head>
<body style="height:100%">
    <ons-navigator var="myNavigator" page="login.html"> 
    </ons-navigator> 
</body>
</html>
```

We will also create login.html to show our app's landing page.

```html
<ons-page ng-controller="LoginController" style="background:#cedfe5;">
  <!-- Loading Modal -->
  <ons-modal var="modal">
    <ons-icon icon="ion-load-c" spin="true"></ons-icon>
    <br><br>
    Please wait.
  </ons-modal>
  
  <!-- Login form -->
  <div id="loginContainer">
    <div id="loginContents">
      <h4 id="subTitle"  >Kintone API x Monaca</h4>
      <h4 id="title">Sales Records Management System</h4>    
      <ons-row id="url" align="center">
        <ons-col align="right" width="20%" class="fontSmaller">https://</ons-col>
        <ons-col width="50%"><input placeholder="Domain" type="text" id="test2" ng-model="domain" class="loginItems"></ons-col>
        <ons-col align="left" width="30%" class="fontSmaller">.cybozu.com</ons-col>
        <br /><br />
      </ons-row>
      <ons-row>
        <ons-col width="20%"></ons-col><ons-col width="50%"><input placeholder="Login Name" type="text" ng-model="loginName" class="loginItems"></ons-col>
        <ons-col></ons-col>
        <br /><br />
      </ons-row>
      <ons-row>
        <ons-col width="20%"></ons-col><ons-col width="50%"><input placeholder="Password" type="password" ng-model="loginPass" class="loginItems"></ons-col>
        <ons-col></ons-col>
      </ons-row><br />
      <ons-row id="saveInfo"> 
        <ons-col><input type="checkbox" ng-model="remember">Remember me</ons-col>
      </ons-row>
      <ons-button ng-click="showList()" modifier="quiet" id="loginButton">Login</ons-button>  
    </div>
  </div>
</ons-page>
```

We used Onsen UI components to make our life easier as in above code. In order to access Kintone API, what we really need in this page are:

* domain
* loginName
* LoginPass

Let's take a look at what we have right now in Monaca Debugger.

![App Login Page](/blog/content/images/2015/Oct/Kintone_login_page.png)

#### Implementing Login Process

It's time to make back-end login process. First of all, we need Base64 library to use Kintone API. For this demo we use [BASE64 (RFC2045) Encode/Decode for string in JavaScript](http://tociyuki.flop.jp/archive/base64.js) by MIZUTANI Tociyuki. Download and upload into the project under "js" folder (by creating new folder). Also, we will make kintone.js file for later modification.

Include those files in index.html.

```html
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <script src="components/loader.js"></script>
    <link rel="stylesheet" href="components/loader.css">
    <link rel="stylesheet" href="css/style.css">
    <script>
        var myApp = angular.module('myApp', ['onsen']);
    </script>
  <!-- Add starts here -->
    <script src="js/base64.js"></script> 
    <script src="js/kintone.js"></script>
  <!-- Add ends here -->
</head>
```

As in HTML file, when you tap Login button we want to show records of sales report. The code below defines ```showList``` function and will make HTTP request to get data from Kintone API. 

```js
// We will make this global variable in case of other use.
var authorization; // for authentication
 
myApp.controller("LoginController", function ($scope, $http, ItemService) {
 
  // Start Login process
  $scope.showList = function () {
    ItemService.domain = $scope.domain;
    
    console.log("Start Login process");
  
    // Set required info based on input value.
    $scope.url = "https://"+$scope.domain+".cybozu.com/k/v1/records.json";
    authorization = base64encode($scope.loginName+":"+$scope.loginPass);
  
    // Creating data to send refering kintoneAPIdocument.
    $scope.req = {
      url: $scope.url,
      method: "GET",
      headers: {
        "X-Cybozu-Authorization": authorization,
        "Content-Type": "application/json"
      },
      params: {
        "app": 13
      }
    };
  
    // Send http request
    $http($scope.req)
      .success(function success(data, status, headers, config) {
        // Successful login process
        console.log("Successfully logged in");
        if ($scope.remember == true) {
          // When "remember me" is checked
          // Store data in localStorage.
          localStorage.setItem("LoginName", $scope.loginName);
          localStorage.setItem("Password",$scope.loginPass);
          localStorage.setItem("Domain",$scope.domain);
        } else if (localStorage.getItem("LoginName")) {
          // When "remember me" is not checked
          localStorage.removeItem("LoginName");
          localStorage.removeItem("Password");
          localStorage.removeItem("Domain");
        }
      })
      .error(function error(data, status, headers, config) {
        alert("Login name or password is incorrect.");  
      });
  };
  
  // If the data is already stored in a device, we'll use those data to make a request.
  if (localStorage.getItem("LoginName")) {
    $scope.loginName = localStorage.getItem("LoginName");
    $scope.loginPass = localStorage.getItem("Password");
    $scope.domain = localStorage.getItem("Domain");
    $scope.remember = true;
    $scope.showList();
    // Show ons-modal
    $(document.body).on("pageinit", function () {
      modal.show();
      setTimeout("modal.hide()", 1000);
    });
  }
});
 
myApp.service("ItemService", function () {
 
});
```

To make sure this is working, try logging in with your account information. You will see "Start login process" and "Successfully logged in" messages in a console window. 
*Kintone's server will reject if you access from a desktop browser.

#### Receiving Data 

Now that we are successfully logged in, we can get data. Add following code.

```js
if ($scope.remember == true) {
  // When "remember me" is checked
  // Store data in localStorage.
  localStorage.setItem("LoginName", $scope.loginName);
  localStorage.setItem("Password",$scope.loginPass);
  localStorage.setItem("Domain",$scope.domain);
} else if (localStorage.getItem("LoginName")) {
  // When "remember me" is not checked
  localStorage.removeItem("LoginName");
  localStorage.removeItem("Password");
  localStorage.removeItem("Domain");
}
 
// Add starts here
// Nagigate to list view if login is successful
myNavigator.pushPage("list.html",{animation:"none"});
// Add ends here
```

#### list.html

The content of list.html is as follows.

```html
<ons-page ng-controller="MainController" style="background:#cedfe5">
  <ons-toolbar>
    <div class="left" ng-click="signout()" id="signoutButton">
      <ons-toolbar-button><ons-icon icon="fa-sign-out"></ons-icon>Signout</ons-toolbar-button>
    </div>
    <div class="center">Records</div>
  </ons-toolbar>
 
  <div id="listContainer">
      <div ng-repeat="item in items track by $index"  ng-click="create(item)" id="listContents">
          <div>{{item['SINGLE_LINE_TEXT']['value']}}</div>
          <div id="listHorizentalLine" style=""></div>
          <div id="listSubInfo" style="">{{item['SINGLE_LINE_TEXT_0']['value']}}ã€€</div>
      </div>
  </div>
</ons-page>
```

#### Final Touch in kintone.js

We use items variable to store list of records in list.html so we will modify js/kintone.js slightly.

First, reset $scope.items in a very beginning of the ```showList``` function.

```js
$scope.showList = function () {
  ItemService.domain = $scope.domain;
  $scope.items = []; // Added
    :
```

Then, we will store returned data into the variable in the success call we defined earlier.

```js
.success(function success(data, status, headers, config) {
  // Add starts here
  // Store returned data into ItemService.items
  for (var i=0; i<data.records.length; i++) {
    $scope.items.push(data.records[i]);
  }
  ItemService.items = $scope.items;
  // Add end here
```

Finally, define MainController.

```js
myApp.controller("MainController", function ($scope, $http, ItemService) {
  $scope.items = ItemService.items;
});
```

And that's about it.

#### Let's Try it Out

If we didn't make any mistake we should be able to see list of records.

### Further Practice

Changing the appearance or adding a detailed page to the app will make look and feel much nicer and richer.

![Further Practice](/blog/content/images/2015/Oct/monaca-kintone.gif)

The good thing about Kintone is that we are able to have control over data not only through their nice desktop application but also their rich Web API. Furthermore, using Monaca this is how easy a custom business application is made so take advantage of the Monaca and Kintone to create your own hybrid application.