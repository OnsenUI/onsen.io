msgid ""
msgstr ""
"Project-Id-Version: \n"
"Language-Team: \n"
"PO-Revision-Date: 2018-08-31 13:00+0900\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"POT-Creation-Date: 2018-08-27 01:40+0000\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 2.1.1\n"
"Last-Translator: \n"
"Language: ja\n"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:1
msgid ""
"title: 'Theme Customization'\n"
"order: 160\n"
"tocGroup: guide\n"
"layout: docs.html.eco"
msgstr ""
"title: テーマのカスタマイズ\n"
"order: 160\n"
"tocGroup: guide\n"
"layout: docs.html.eco"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:2
msgid "description: 'Learn many ways to modify Onsen UI app style.'"
msgstr "description: 'Onsen UIアプリのスタイルを修正する方法を説明します。'"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:3
msgid "<%- @markdown => %>"
msgstr "<%- @markdown => %>"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:4
msgid "Theme Customization"
msgstr "テーマのカスタマイズ"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:5
msgid ""
"The appearance of Onsen UI is defined by CSS Components. When using Onsen UI "
"the following CSS reference, which contains the CSS Components themselves, "
"needs to be specified."
msgstr ""
"Onsen UIの見た目は、CSSコンポーネントによって定義されています。Onsen UIを利用"
"する時、次のCSSを必ず読み込んでいると思いますが、これがOnsen UIのCSSコンポー"
"ネントです。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:6
msgid ""
"<link rel=\"stylesheet\" type=\"text/css\" href=\"path/to/onsen-css-"
"components.css\">"
msgstr ""
"<link rel=\"stylesheet\" type=\"text/css\" href=\"path/to/onsen-css-"
"components.css\">"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:7
msgid ""
"Onsen UI default style can be modified by customizing the CSS Components "
"themselves. Onsen UI CSS Components are not written in CSS based meta-"
"language like Sass or Less, but are based on [cssnext](http://cssnext.github.io), "
"which incorporates the latest standard CSS syntax. By understanding its "
"working principles, anyone can freely customize Onsen UI's appearance."
msgstr ""
"Onsen UIのデフォルトの見た目を変更するには、このCSSコンポーネントをカスタマイ"
"ズして下さい。Onsen UIのCSSコンポーネントは、SassやLessのような独自のCSSメタ"
"言語ではなく、標準化されている文法を持つ[cssnext](http://cssnext.github.io)によって"
"記述されているのでCSSさえわかっていれば誰でもカスタマイズすることができます。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:8
#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:27
msgid "![screenshot](/images/guide/css-components-previewer-01.png)"
msgstr "![screenshot](/images/guide/css-components-previewer-01.png)"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:9
msgid ""
"This guide provides all the information required to customize Onsen UI CSS "
"Components."
msgstr ""
"このページでは、CSSコンポーネントのカスタマイズ方法について紹介します。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:10
msgid "Setup"
msgstr "セットアップ"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:11
msgid ""
"The CSS source code is specified in multiple stylesheets. All these files "
"can be built into a single CSS file (`onsen-css-components.css`). In order "
"to do so, an initial setup operation needs to be performed."
msgstr ""
"CSSコンポーネントのソースコードは、複数のCSSファイルによって構成されていま"
"す。これらのCSSファイルは、ビルドすることで一つのCSSファイル(`onsen-css-"
"components.css`)にすることができます。ここではまずビルドするためのセットアッ"
"プの手順を紹介します。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:12
msgid ""
"First, use npm to install Onsen UI package in a chosen directory. If the "
"directory does not have an npm package file (`package.json`), run `npm init` "
"to create a default one."
msgstr ""
"まず、npmを使ってOnsen UIのパッケージをインストールします。プロジェクトのディ"
"レクトリにnpmのパッケージファイル(package.json)がない場合には、`npm init`を実"
"行してパッケージファイルを作成して下さい。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:13
msgid "$ npm init # if package.json is missing"
msgstr "$ npm init # package.jsonが無い場合"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:14
msgid ""
"Then install `onsenui` package. You can either install the latest version or "
"a specific one, based on your needs."
msgstr ""
"次に`onsenui`パッケージをインストールします。`onsenui`パッケージのバージョン"
"は自身が利用しているOnsen UIのバージョンに合わせて下さい。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:15
msgid ""
"$ npm install onsenui\n"
"\n"
"$ npm install onsenui@2.7.0 # install a specific version"
msgstr ""
"$ npm install onsenui\n"
"\n"
"$ npm install onsenui@2.7.0 # バージョンを指定する場合"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:16
msgid ""
"The `onsenui` package will be installed in the `node_modules` directory and "
"`css-components-src` directory is inside the `onsenui` package itself. "
"Navigate to it."
msgstr ""
"`onsenui`パッケージが`node_modules`ディレクトリにインストールされるので、パッ"
"ケージの`css-components`ディレクトリに移動します。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:17
msgid "$ cd node_modules/onsenui/css-components-src"
msgstr "$ cd node_modules/onsenui/css-components-src"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:18
msgid ""
"At this point, install the package dependencies by using [yarn](https://"
"yarnpkg.com/). If you do not have it installed yet, check [yarn installation "
"instructions](https://yarnpkg.com/lang/en/docs/install/)."
msgstr ""
"次に[yarn](https://yarnpng.com/)を使って依存するパッケージをインストールしま"
"す。`yarn`をインストールしていない場合は、[yarnのインストール手順](https://"
"yarnpkg.com/lang/en/docs/install/)を参照して下さい。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:19
msgid "$ yarn install --pure-lockfile"
msgstr "$ yarn install --pure-lockfile"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:20
msgid ""
"Once the dependencies have been successfully installed, run the following "
"command to execute the previewer."
msgstr ""
"無事依存するパッケージを解決できたら、次のコマンドを実行してプレビュワーを起"
"動して下さい。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:21
msgid ""
"$ yarn run serve\n"
"\n"
"$ npm run serve # alternative command"
msgstr ""
"$ yarn run serve\n"
"\n"
"$ npm run serve # もしくはこちら"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:22
msgid ""
"If you are using an Onsen UI version prior to 2.7.0, run `gulp serve` "
"instead of `yarn run serve`."
msgstr ""
"もし利用するOnsen UIのパッケージのバージョンがv2.7.0よりも前の場合には、"
"`yarn run serve`ではなく`gulp serve`を実行して下さい。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:23
msgid ""
"$ npm install -g gulp\n"
"\n"
"$ gulp serve"
msgstr ""
"$ npm install -g gulp\n"
"\n"
"$ gulp serve"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:24
msgid ""
"The build execution will generate an output similar to the following one:"
msgstr "するとビルドが始まり、成功すると次のようなメッセージが表示されます:"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:25
msgid ""
"...\n"
"[15:37:02] Finished 'build' after 5.25 s\n"
"[15:37:02] Starting 'serve'...\n"
"\n"
"Access URLs:\n"
"     Local: http://localhost:4321/\n"
"  External: http://(IP Address):4321/\n"
"\n"
"Built CSS Files:\n"
"  ./build/onsen-css-components.css"
msgstr ""
"...\n"
"[15:37:02] Finished 'build' after 5.25 s\n"
"[15:37:02] Starting 'serve'...\n"
"\n"
"Access URLs:\n"
"     Local: http://localhost:4321/\n"
"  External: http://(IP Address):4321/\n"
"\n"
"Built CSS Files:\n"
"  ./build/onsen-css-components.css"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:26
msgid ""
"When `http://localhost:4321/` is opened in a Web Browser, a preview of the "
"CSS Components will be displayed."
msgstr ""
"`http://localhost:4321/`をウェブブラウザで開くとCSSコンポーネントのプレビュー"
"用のUIが表示されます。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:28
msgid ""
"To see the preview on a mobile device, connect the device to the same "
"network of your PC and open `http://(IP Address):4321/` on its Web Browser."
msgstr ""
"モバイル端末でプレビューを確認するには、プレビューを動かしているPCとモバイル"
"を同じネットワークに接続した上でモバイル端末のウェブブラウザでコマンドライン"
"に表示された`http://(IP Address):4321/`を開いて下さい。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:29
msgid ""
"If you just want to build the CSS Components once, instead of starting the "
"previewer, run the following command:"
msgstr ""
"プレビューを起動するのではなく、単にCSSコンポーネントを一度だけビルドする場合"
"には次のコマンドを実行して下さい:"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:30
msgid ""
"$ yarn run build\n"
"\n"
"$ npm run build #alternative command"
msgstr ""
"$ yarn run build\n"
"\n"
"$ npm run build # もしくはこちら"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:31
msgid "Customize"
msgstr "カスタマイズ"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:32
msgid ""
"If a CSS file is modified while `yarn run serve` command is running, it will "
"be automatically built and the changes will be reflected on the previewer. "
"During the customization process, each CSS Components file needs to be "
"modified individually, while continuously monitoring the state of the "
"changes."
msgstr ""
"先程の`yarn run serve`コマンドを実行している状態でCSSファイルを編集すると、"
"CSSファイルが自動的にビルドされ、プレビューに新しくビルドされたCSSがインジェ"
"クトされて即座に反映されます。開発者がCSSコンポーネントをカスタマイズする場合"
"には、この状態でコンポーネントの見た目を確認しつつ、個別のCSSファイルを編集し"
"ていくことになります。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:33
msgid "`css-components-src` directory is structured as it follows:"
msgstr "css-componentsディレクトリ以下は次のようなディレクトリ構造になります:"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:34
msgid ""
"css-components\n"
"├── build\n"
"├── misc\n"
"├── node_modules\n"
"├── previewer-src\n"
"└── src\n"
"    ├── components\n"
"    └── img"
msgstr ""
"css-components\n"
"├── build\n"
"├── misc\n"
"├── node_modules\n"
"├── previewer-src\n"
"└── src\n"
"    ├── components\n"
"    └── img"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:35
msgid ""
"`src/components` directory contains the CSS files that make up Onsen UI CSS "
"Components."
msgstr ""
"`src/components`ディレクトリ以下に、Onsen CSS Componentsを構成するCSSファイル"
"などが収められています。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:36
msgid ""
"With the previewer in execution, let's try to edit the Switch Component CSS "
"file (`src/components/switch.css`). `yarn run serve` execution will display "
"a message similar to the following one, while the CSS will be automatically "
"built and displayed in the previewer."
msgstr ""
"プレビューを起動した状態で、試しにSwtichコンポーネントのCSSファイル(`src/"
"components/switch.css`)を編集してみましょう。すると`yarn run serve`を実行して"
"いるコマンドラインでは次のようなメッセージが表示され、CSSが自動的にビルドされ"
"プレビューにも反映されます。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:37
msgid ""
"[17:07:44] Starting 'css-clean'...\n"
"[17:07:44] Finished 'css-clean' after 7.94 ms\n"
"[17:07:44] Starting 'stylelint'...\n"
"[17:07:45] Finished 'stylelint' after 1.33 s\n"
"[17:07:45] Starting 'cssnext'...\n"
"[17:07:45] Finished 'cssnext' after 257 ms\n"
"[17:07:45] Starting 'cssmin'...\n"
"[17:07:46] Finished 'cssmin' after 453 ms\n"
"[17:07:46] Starting 'build-css'...\n"
"[17:07:46] Finished 'build-css' after 8.11 μs\n"
"[17:07:46] Starting 'generate-preview'...\n"
"[17:07:46] Finished 'generate-preview' after 156 ms\n"
"\n"
"Access URLs:\n"
"     Local: http://localhost:4321/\n"
"  External: http://192.168.100.100:4321/\n"
"\n"
"Built CSS Files:\n"
"  ./build/onsen-css-components.css"
msgstr ""
"[17:07:44] Starting 'css-clean'...\n"
"[17:07:44] Finished 'css-clean' after 7.94 ms\n"
"[17:07:44] Starting 'stylelint'...\n"
"[17:07:45] Finished 'stylelint' after 1.33 s\n"
"[17:07:45] Starting 'cssnext'...\n"
"[17:07:45] Finished 'cssnext' after 257 ms\n"
"[17:07:45] Starting 'cssmin'...\n"
"[17:07:46] Finished 'cssmin' after 453 ms\n"
"[17:07:46] Starting 'build-css'...\n"
"[17:07:46] Finished 'build-css' after 8.11 μs\n"
"[17:07:46] Starting 'generate-preview'...\n"
"[17:07:46] Finished 'generate-preview' after 156 ms\n"
"\n"
"Access URLs:\n"
"     Local: http://localhost:4321/\n"
"  External: http://192.168.100.100:4321/\n"
"\n"
"Built CSS Files:\n"
"  ./build/onsen-css-components.css"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:38
msgid ""
"If the CSS syntax is incorrect, a relative error will appear on the command "
"line.\n"
"In case you need to use a customized CSS Component on your own project, you "
"can just copy `./build/onsen-css-components.css` file into the project "
"directory and use it instead of the default style."
msgstr ""
"もしCSSの文法が間違っている場合にはコマンドライン上にエラーが表示されます。\n"
"カスタマイズしたCSSコンポーネントを自身のプロジェクトで利用する場合には、`./"
"build/onsen-css-components.css`のファイルを自身のプロジェクトのフォルダ内にコ"
"ピーして利用して下さい。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:39
msgid "Change Colors"
msgstr "色の変更"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:40
msgid ""
"The color variables used within the CSS Components are defined in the`src/"
"theme.css` file."
msgstr ""
"`src/theme.css`には、CSSコンポーネント内で利用する色の変数(CSS Variables)が定"
"義されています。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:41
msgid ""
":root {\n"
"  --background-color: #efeff4;\n"
"  --text-color: #1f1f21;\n"
"  --sub-text-color: #999;\n"
"  --highlight-color: #0076ff;\n"
"  --second-highlight-color: #25a6d9;\n"
"  --border-color: #ccc;\n"
"  ..."
msgstr ""
":root {\n"
"  --background-color: #efeff4;\n"
"  --text-color: #1f1f21;\n"
"  --sub-text-color: #999;\n"
"  --highlight-color: #0076ff;\n"
"  --second-highlight-color: #25a6d9;\n"
"  --border-color: #ccc;\n"
"  ..."

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:42
msgid ""
"The color used by the CSS Components can be customized by changing the "
"content of these variables. The variables used for the Material design "
"definition have a `material` prefix in the variable name. The variables used "
"for the components for iOS do not have any prefix."
msgstr ""
"この変数の定義を変更することで、CSSコンポーネントで利用する色を変更できます。"
"Material Design用のコンポーネントで利用している変数は、変数名に`material`プレ"
"フィクスがついています。iOS用のコンポーネントで利用している変数には、プレフィ"
"クスは付きません。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:43
msgid ""
":root {\n"
"  (...)\n"
"  --material-notification-background-color: #e91e63;\n"
"  --material-switch-active-thumb-color: #009688;\n"
"  --material-switch-inactive-thumb-color: #f1f1f1;\n"
"  --material-switch-active-background-color: #77c2bb;\n"
"  --material-switch-inactive-background-color: #b0afaf;\n"
"  --material-range-track-color: #bdbdbd;"
msgstr ""
":root {\n"
"  (...)\n"
"  --material-notification-background-color: #e91e63;\n"
"  --material-switch-active-thumb-color: #009688;\n"
"  --material-switch-inactive-thumb-color: #f1f1f1;\n"
"  --material-switch-active-background-color: #77c2bb;\n"
"  --material-switch-inactive-background-color: #b0afaf;\n"
"  --material-range-track-color: #bdbdbd;"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:44
msgid "CSS Design Conventions"
msgstr "CSSの設計規約"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:45
msgid ""
"The first time you take a look at the source code of a CSS component, the "
"CSS class name may appear to be following a weird convention."
msgstr ""
"初めてCSSコンポーネントのソースを見る人は、CSSのクラス名が醜くでたらめな命名"
"規則によって記述されているように見えるかもしれません。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:46
msgid ""
"For example, looking at `src/components/switch.css` it can be noted that the "
"class name of the Switch component described in this CSS file uses redundant "
"delimiters like `--` or `__`."
msgstr ""
"例えば、`src/components/switch.css`を見てみましょう。このCSSファイルに記述さ"
"れているSwitchコンポーネントのクラス名には、`--`や`__`によって区切られた冗長"
"に見えるクラス名を使っていることがわかります。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:47
msgid ""
".switch\n"
".switch__toggle\n"
".switch__input\n"
".switch__handle\n"
".switch--active__handle\n"
".switch--material__toggle\n"
".switch--material__input"
msgstr ""
".switch\n"
".switch__toggle\n"
".switch__input\n"
".switch__handle\n"
".switch--active__handle\n"
".switch--material__toggle\n"
".switch--material__input"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:48
msgid ""
"Nevertheless, that is due to the adoptions of [BEM](http://getbem.com) and "
"[MindBEMding](https://csswizardry.com/2013/01/mindbemding-getting-your-head-"
"round-bem-syntax/) naming and design conventions, which makes the design "
"robust and allows to write fast CSS selectors."
msgstr ""
"しかし安心して下さい、Onsen UIのCSSコンポーネントは設計を堅牢にするために、か"
"つ高速なCSSセレクタの記述をするために、設計規約と命名規則に[BEM](http://"
"getbem.com)と[MindBEMding](https://csswizardry.com/2013/01/mindbemding-"
"getting-your-head-round-bem-syntax/)を採用しています。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:49
msgid ""
"In BEM, the classes are described by three components: **Block**, "
"**Element** and **Modifier**.\n"
"The Block encapsulates a standalone entity that is meaningful on its own. "
"The Elements are parts of a block, have no standalone meaning and any of "
"them is semantically tied to its Block. The Modifiers are applied on blocks "
"or elements in order to change appearance, behavior or state."
msgstr ""
"BEMでは、クラスは**Block**, **Element**, **Modifier**の三つの構成要素によって"
"記述されます。Blockは、ある独立するグループの境界を宣言します。Elementはある"
"Blockの配下の要素を表現します。ModifierやBlockやElementを修飾するのに用いま"
"す。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:50
msgid "Let's take a look at the following Switch component as an example."
msgstr "次のSwitchコンポーネントを例に説明します。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:51
msgid "![Switch Component](/images/guide/css-components-switch.png)"
msgstr "![Switchコンポーネント](/images/guide/css-components-switch.png)"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:52
msgid ""
"<label class=\"switch\">\n"
"  <input type=\"checkbox\" class=\"switch__input\">\n"
"  <div class=\"switch__toggle\">\n"
"    <div class=\"switch__handle\"></div>\n"
"  </div>\n"
"</label>"
msgstr ""
"<label class=\"switch\">\n"
"  <input type=\"checkbox\" class=\"switch__input\">\n"
"  <div class=\"switch__toggle\">\n"
"    <div class=\"switch__handle\"></div>\n"
"  </div>\n"
"</label>"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:53
msgid ""
"First, `switch` is declared as class attribute of the outermost element. You "
"can notice that `switch__input`, `switch__toggle` and `switch__handle` are "
"declared in the class attribute of the elements below. Here, `switch` "
"represents a Block while `switch__input`, `switch__toggle` and "
"`switch__handle` represent Elements. In MindBEMding, the Block and the "
"Element names are delimited by `__`."
msgstr ""
"まずいちばん外側の要素では、クラス属性に`switch`が宣言されています。その下に"
"は`switch__input`や`switch__toggle`や`switch__handle`が配下の要素のクラス属性"
"で宣言されているのがわかります。ここでは、`switch`がBlockで、`switch__input`"
"や`switch__toggle`や`switch__handle`がElementを表現しています。MindBEMdingで"
"は、Block名とElement名の区切りには`__`を用います。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:54
msgid ""
"If you want to learn more about the design specifications, feel free to "
"check [BEM](http://getbem.com) and[MindBEMding](https://csswizardry."
"com/2013/01/mindbemding-getting-your-head-round-bem-syntax/) websites."
msgstr ""
"この設計規約について詳しく知りたい場合は、[BEM](http://getbem.com)と"
"[MindBEMding](https://csswizardry.com/2013/01/mindbemding-getting-your-head-"
"round-bem-syntax/)の解説を参照して下さい。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:55
msgid "Preview Changes"
msgstr "プレビューの変更"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:56
msgid ""
"The preview of individual CSS Components is generated from the annotations "
"embedded into the CSS. For example, the preview of the Switch component will "
"look like:"
msgstr ""
"個別のCSSコンポーネントのプレビューは、CSS内に埋め込まれたアノテーションに基"
"づいて生成されています。例えば、Switchコンポーネントのプレビューは、次のよう"
"な画面になります:"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:57
msgid "![screenshot](/images/guide/css-components-previewer-02.png)"
msgstr "![スクリーンショット](/images/guide/css-components-previewer-02.png)"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:58
msgid ""
"The HTML code used in this example is defined by the following annotation "
"embedded in `src/components/switch.css`:"
msgstr ""
"このプレビューに用いられているHTMLのコードは、`src/components/switch.css`に埋"
"め込まれている次のアノテーションで定義されています:"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:59
msgid ""
"/*~\n"
"  name: Switch\n"
"  category: Switch\n"
"  elements: ons-switch\n"
"  markup: |\n"
"    <label class=\"switch\">\n"
"      <input type=\"checkbox\" class=\"switch__input\">\n"
"      <div class=\"switch__toggle\">\n"
"        <div class=\"switch__handle\"></div>\n"
"      </div>\n"
"    </label>\n"
"    <label class=\"switch\">\n"
"      <input type=\"checkbox\" class=\"switch__input\" checked>\n"
"      <div class=\"switch__toggle\">\n"
"        <div class=\"switch__handle\"></div>\n"
"      </div>\n"
"    </label>\n"
"    <label class=\"switch\">\n"
"      <input type=\"checkbox\" class=\"switch__input\" disabled>\n"
"      <div class=\"switch__toggle\">\n"
"        <div class=\"switch__handle\"></div>\n"
"      </div>\n"
"    </label>\n"
"*/"
msgstr ""
"/*~\n"
"  name: Switch\n"
"  category: Switch\n"
"  elements: ons-switch\n"
"  markup: |\n"
"    <label class=\"switch\">\n"
"      <input type=\"checkbox\" class=\"switch__input\">\n"
"      <div class=\"switch__toggle\">\n"
"        <div class=\"switch__handle\"></div>\n"
"      </div>\n"
"    </label>\n"
"    <label class=\"switch\">\n"
"      <input type=\"checkbox\" class=\"switch__input\" checked>\n"
"      <div class=\"switch__toggle\">\n"
"        <div class=\"switch__handle\"></div>\n"
"      </div>\n"
"    </label>\n"
"    <label class=\"switch\">\n"
"      <input type=\"checkbox\" class=\"switch__input\" disabled>\n"
"      <div class=\"switch__toggle\">\n"
"        <div class=\"switch__handle\"></div>\n"
"      </div>\n"
"    </label>\n"
"*/"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:60
msgid ""
"Annotations are embedded in [YAML](http://yaml.org) within CSS comments.\n"
"Actions like the modification of the HTML code, used in the preview to "
"display the CSS Components, or the modification of the preview itself can be "
"performed by simply modifying the related annotations or creating new ones."
msgstr ""
"アノテーションはCSSのコメント内部に[YAML](http://yaml.org)で埋め込まれていま"
"す。もしCSSコンポーネントのプレビューで用いるHTMLを変更したり、プレビューを増"
"やしたい場合にはアノテーションを編集したり新たに埋め込むことができます。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:61
msgid ""
"If you are already running `yarn run serve`, annotation changes will be "
"immediately reflected in the preview UI."
msgstr ""
"`yarn run serve`を実行している状態であれば、このアノテーションの変更も即座に"
"プレビューUIに反映されます。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:62
msgid "Pattern Customization"
msgstr "パターンのカスタマイズ"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:63
msgid "![pattern page](/images/guide/css-components-patterns.png)"
msgstr "![パターンページ](/images/guide/css-components-patterns.png)"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:64
msgid ""
"On the Patterns page, you can see multiple screens with a combination of CSS "
"components. While customizing a theme, it is advised to perform the changes "
"while constantly checking the result at this page. This section provides "
"useful information to perform this kind of operation."
msgstr ""
"Patternsページでは、幾つかのCSSコンポーネントを組み合わせた画面の表示を確認す"
"ることができます。テーマをカスタマイズする際にこのページを見ながら調整すると"
"便利です。ここではこのパターンのカスタマイズ方法について説明します。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:65
msgid ""
"The HTML of the patterns is defined in `css-components/patterns.yaml` file."
msgstr ""
"パターンとして表示されるHTMLは、`css-components/patterns.yaml`ファイル内に記"
"述されています。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:66
msgid ""
"---\n"
"name: Basic\n"
"markup: |\n"
"  <div class=\"page\">\n"
"    <div class=\"toolbar\">\n"
"      <div class=\"toolbar__left\"><span class=\"toolbar-button\">Label</"
"span></div>\n"
"      <div class=\"toolbar__center\">Title</div>\n"
"..."
msgstr ""
"---\n"
"name: Basic\n"
"markup: |\n"
"  <div class=\"page\">\n"
"    <div class=\"toolbar\">\n"
"      <div class=\"toolbar__left\"><span class=\"toolbar-button\">Label</"
"span></div>\n"
"      <div class=\"toolbar__center\">Title</div>\n"
"..."

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:67
msgid ""
"Feel free to edit `patterns.yaml` file content if you want to modify the "
"content of the Patterns page. If the file is modified while the previewer is "
"running, the changes will be automatically reflected on it."
msgstr ""
"Patternsページで表示されるパターンのHTMLを修正したい場合には、この`patterns."
"yaml`を編集して下さい。プレビューを起動しているときにこの`patterns.yaml`を編"
"集すると、CSSファイルに変更を加えたときと同様に自動的に反映されます。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:68
msgid "Add another theme"
msgstr "別のテーマを追加"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:69
msgid ""
"Instead of customizing Onsen UI default theme, you have the ability to add a "
"different one."
msgstr ""
"Onsen UIのデフォルトのテーマをカスタマイズするのではなく、別のテーマを追加す"
"る方法を説明します。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:70
msgid ""
"Let's try to add another theme, called `yet-another`. Create `src/yet-"
"another-onsen-css-components.css` file, which will be one of the entry "
"points for the build process, with the following content:"
msgstr ""
"`src/(任意の単語)-onsen-css-components.css`というファイルを追加して下さい。追"
"加したCSSファイルはビルドのエントリーポイントのひとつになります:"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:71
msgid ""
"@import url('./license.css');\n"
"@import url('./yet-another-theme.css');\n"
"@import url('./components/index.css');"
msgstr ""
"@import url('./license.css');\n"
"@import url('./yet-another-theme.css');\n"
"@import url('./components/index.css');"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:72
msgid ""
"At this point, create a `src/yet-another-theme.css` file and paste into it "
"the content of `src/theme.css` file."
msgstr ""
"さらに`src/yet-another-theme.css`ファイルを作成します。内容は`src/theme.css`"
"ファイルからコピーしてください。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:73
msgid ""
"Once you execute `yarn run serve` command and the build has been completed, "
"you should see a message that informs about `yet-another-onsen-css-"
"components.css` being successfully built into the `build` directory."
msgstr ""
"`yarn run serve`でプレビューを起動してビルドが完了すると、次のように表示され"
"ます。`build`ディレクトリに`yet-another-onsen-css-components.css`がビルドされ"
"ていることがわかります。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:74
msgid ""
"Built CSS Files:\n"
"  ./build/dark-onsen-css-components.css\n"
"  ./build/onsen-css-components.css\n"
"  ./build/yet-another-onsen-css-components.css"
msgstr ""
"Built CSS Files:\n"
"  ./build/dark-onsen-css-components.css\n"
"  ./build/onsen-css-components.css\n"
"  ./build/yet-another-onsen-css-components.css"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:75
msgid ""
"You will also be able to select the theme you just created in the preview "
"screen."
msgstr "プレビュー画面でも追加したテーマを選択できるようになります。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:76
msgid "![new theme added](/images/guide/css-components-add-theme.png)"
msgstr "![追加された新しいテーマ](/images/guide/css-components-add-theme.png)"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:77
msgid ""
"Once you have verified that `yet-another` theme has been successfully built, "
"you can proceed with its color customization by editing the CSS definitions "
"in `src/yet-another-theme.css` file."
msgstr ""
"`yet-another`テーマが無事ビルドできることを確認できれば、あとは先程作成した"
"`src/yet-another-theme.css`を開いてCSS変数を編集することで追加したテーマの色"
"をカスタマイズすることができます。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:78
msgid "Modifiers"
msgstr "Modifier"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:79
msgid ""
"A modifier is a cross-component way to provide customizability for Onsen UI "
"components in the shape of custom attributes. When a component is defined "
"with a modifier, it will have a separate class namespace so that you can "
"apply custom styles to the component. Some components have several easy-to-"
"use preset modifiers to change the appearance."
msgstr ""
"modifier（モディファイアー）は、Onsen UIのコンポーネントにクロスプラット"
"フォーム性とカスタマイズ性を与える独自のHTML属性です。modifierはCSSクラスに"
"よって定義されています。Onsen UIでは、modifierを作成してコンポーネントに適用"
"することでコンポーネントのスタイルをカスタマイズすることができます。いくつか"
"のコンポーネントはすぐに使えるプリセットmodifierを持っています。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:80
msgid ""
"For example, each of the following buttons has a different look. To change "
"modifiers dynamically, please manipulate modifier attribute from JavaScript."
msgstr ""
"例えば、以下のボタン群はmodifierを使うことによりそれぞれ別の見た目になってい"
"ます。なお、動的にmodifierを変更するには、`modifier`属性をJavaScriptで変更し"
"てください。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:81
msgid ""
"<ons-button modifier=\"quiet\">Quiet</ons-button>\n"
"<ons-button modifier=\"light\">Light</ons-button>\n"
"<ons-button modifier=\"large\">Large</ons-button>\n"
"<ons-button modifier=\"cta\">Call To Action</ons-button>\n"
"<ons-button modifier=\"material\">Material Design</ons-button>"
msgstr ""
"<ons-button modifier=\"quiet\">Quiet</ons-button>\n"
"<ons-button modifier=\"light\">Light</ons-button>\n"
"<ons-button modifier=\"large\">Large</ons-button>\n"
"<ons-button modifier=\"cta\">Call To Action</ons-button>\n"
"<ons-button modifier=\"material\">Material Design</ons-button>"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:82
msgid ""
"For further information, please have a look at [this article](https://onsen."
"io/blog/creating-custom-modifiers/)."
msgstr ""
"より詳しい情報については、[このブログ記事（英語）](https://onsen.io/blog/"
"creating-custom-modifiers/)をご覧ください。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:83
msgid "Cross Platform Styling (Autostyling)"
msgstr "クロスプラットフォームスタイル（オートスタイル）"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:84
msgid ""
"Onsen UI components are automatically styled depending on the platform where "
"the app runs. You can easily test this feature with your browser Dev Tools "
"by switching between iOS and Android views or by appending `?"
"platform=android` or `?platform=ios` as a query string to the URL."
msgstr ""
"Onsen UIのコンポーネントは、アプリが動作しているプラットフォームに応じて自動"
"的にスタイルが変化します。この機能はブラウザの開発者ツール（Dev Tools）でiOS"
"とAndroidのビューを切り替えることで簡単にテストできます。もしくは、URLに`?"
"platform=ios`や`?platform=android`をクエリ文字列として加えることでもテストで"
"きます。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:85
msgid ""
"Automatic styling simply applies `modifier=\"material\"` to the components "
"when `ons.platform.isAndroid()` is true. You can disable this feature by "
"running `ons.disableAutoStyling()` right after including `onsenui.js` (i.e. "
"before the app is initialized). If you disable it you may need to manually "
"specify `modifier=\"material\"` in every component you want to display with "
"Material Design. You can also specify `disable-auto-styling` attribute in "
"specific components that you don't want to auto style."
msgstr ""
"オートスタイルは、`ons.platform.isAndroid()`が`true`の時に`modifier="
"\"material\"`をコンポーネントに付加します。オートスタイルは、`onsenui.js`の読"
"み込み直後（つまり、アプリの初期化の直前）に`ons.disableAutoStyling()`を実行"
"することで無効にできます。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:86
msgid "Some tools are provided to give a more accurate customization."
msgstr ""
"オートスタイルをより細かく制御できるように、いくつかのツールが提供されていま"
"す。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:87
msgid "Platform utilities"
msgstr "プラットフォームユーティリティ"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:88
msgid ""
"[`ons.platform`](/v2/api/js/ons.platform.html) object is available with "
"methods such as `ons.platform.isIOS()`, `ons.platform.isWebView()`, etc."
msgstr ""
"[`ons.platform`](/v2/api/js/ons.platform.html)オブジェクトを使うと、`ons."
"platform.isIOS()`や`ons.platform.isWebView()`などのメソッドが利用できます。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:89
msgid ""
"You can set a platform with `ons.platform.select('android')`, for example, "
"in order to display Material Design on every platform. This must be called "
"before the app is initialized (right after including `onsenui.js`)."
msgstr ""
"`ons.platform.select('android')`でプラットフォームをAndroidに固定すると、全て"
"のプラットフォームでマテリアルデザインのコンポーネントを強制的に表示すること"
"ができます。ただし、このメソッドはアプリが初期化される直前（つまり`onsenui."
"js`を読み込んだ直後）に呼び出す必要があります。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:90
msgid "Conditional element"
msgstr "条件要素"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:91
msgid ""
"A conditional element called [`ons-if`](/v2/api/js/ons-if.html) is available "
"to filter content depending on the platform or orientation."
msgstr ""
"[`ons-if`](/v2/api/js/ons-if.html)という名前の条件要素を使うと、プラット"
"フォームや画面の向きに応じて表示するコンテンツを変えることができます。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:93
msgid "`<ons-if>` component is not available for React and Vue bindings."
msgstr ""
"なお、ReactバインディングとVueバインディングでは`<ons-if>`コンポーネントは利"
"用できませんので、`ons.platform.isIOS()`などをご利用ください。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:95
msgid ""
"  <ons-if platform=\"android\">\n"
"    This is Android\n"
"  </ons-if>\n"
"  <ons-if platform=\"ios other\">\n"
"    This is NOT Android\n"
"  </ons-if>"
msgstr ""
"  <ons-if platform=\"android\">\n"
"    Androidでのみ表示されるコンテンツ\n"
"  </ons-if>\n"
"  <ons-if platform=\"ios other\">\n"
"    Android以外でのみ表示されるコンテンツ\n"
"  </ons-if>"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:96
msgid ""
"With this, for example, you can display [`ons-fab`](/v2/api/js/ons-fab.html) "
"for Material Design and other types of buttons for iOS flat design."
msgstr ""
"これを使うと、例えば、Androidにだけ[`ons-fab`](/v2/api/js/ons-fab.html)を表示"
"したり、iOSにだけボタンを表示したりすることができます。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:97
msgid ""
"AngularJS 1 bindings also provide [`ons-if-platform`](/v2/api/angular1/ons-"
"if-platform.html) for this purpose:"
msgstr ""
"AngularJS 1バインディングでは[`ons-if-platform`](/v2/api/angular1/ons-if-"
"platform.html)というディレクティブも提供しています:"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:98
msgid ""
"<div ons-if-platform=\"android\">\n"
"  This is Android\n"
"</div>"
msgstr ""
"<div ons-if-platform=\"android\">\n"
"  Androidのみで表示されるコンテンツ\n"
"</div>"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:99
msgid "Icons shortcut"
msgstr "アイコンショートカット"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:100
msgid ""
"[`ons-icon`](/v2/api/js/ons-icon.html) provides a shortcut to make auto "
"styling easier:"
msgstr ""
"[`ons-icon`](/v2/api/js/ons-icon.html)はオートスタイルをより簡単に活用するた"
"めのショートカットを提供しています:"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:101
msgid ""
"<ons-icon icon=\"ion-navicon, material:md-menu\" size=\"24px, material:20px"
"\"></ons-icon>"
msgstr ""
"<ons-icon icon=\"ion-navicon, material:md-menu\" size=\"24px, material:20px"
"\"></ons-icon>"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:102
msgid ""
"The second icon will be displayed when `material` modifier is present (other "
"modifiers can be used)."
msgstr ""
"`md-menu`は`material` modifierが付加されている時のみ表示されます。なお、"
"`material`以外のmodifierでも同様のことができます。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:103
msgid "Animations"
msgstr "アニメーション"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:104
msgid ""
"Onsen UI already provides multiple built-in animations for its routing "
"components and dialogs. However, it is also possible to create custom "
"animations for specific components or even [extend existing animations](/v2/"
"guide/extend.html#extending-animators) and change part of them. This is a "
"relatively advanced topic since it requires digging a bit in Onsen UI core "
"code."
msgstr ""
"Onsen UIのルーティングコンポーネント（ナビゲーター、スプリッター、タブバー"
"等）やダイアログには、いくつかのビルトインアニメーションが用意されています。"
"しかし、自分でカスタムアニメーションを作ることもできます。また、[ビルトインア"
"ニメーションを拡張したり](/v2/guide/extend.html#extending-animators)、改造し"
"たりすることもできます。しかし、アニメーションの自作や拡張、改造については"
"Onsen UIのコアコードに深入りする必要があり、比較的複雑なため注意してくださ"
"い。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:105
msgid "Animit"
msgstr "Animit"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:106
msgid ""
"Onsen UI relies on [Animit](https://github.com/OnsenUI/OnsenUI/blob/master/"
"core/src/ons/animit.js), a minimal animation library for managing CSS "
"transitions on mobile browsers."
msgstr ""
"Onsen UIは[Animit](https://github.com/OnsenUI/OnsenUI/blob/master/core/src/"
"ons/animit.js)という小さなアニメーションライブラリに依存しています。Animitは"
"モバイルブラウザでのCSSトランジションを制御するライブラリです。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:107
msgid ""
"Animit can be accessed with `ons.animit` or `import { animit } from ons;`, "
"depending on the type of the app. It exposes methods to queue CSS "
"animations, apply delays and run callbacks as follows:"
msgstr ""
"Animitには`ons.animit`または`import { animit } from ons;` でアクセスすること"
"ができます。Animitは以下のように、CSSアニメーションをキューしたり、ディレイを"
"適用したり、コールバック関数を呼んだりするためのメソッドを提供しています:"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:108
msgid ""
"let animation1 = animit(myElement) // This defines the animation for the "
"provided element\n"
"  .saveStyle() // Saves the original style of the element\n"
"  .queue({ // Original position/style in the animation\n"
"    css: {\n"
"      transform: 'translate3D(0, 100%, 0)'\n"
"    },\n"
"    duration: 0\n"
"  })\n"
"  .wait(0.2) // Delay applied before the transition starts\n"
"  .queue({ // Next step in the animation\n"
"    css: {\n"
"      transform: 'translate3D(0, 0, 0)',\n"
"    },\n"
"    duration: 0.6,\n"
"    timing: 'linear'\n"
"  })\n"
"  .restoreStyle() // Restores the original style of the element\n"
"  .queue(done => { // Optional \"On transition end\" callback\n"
"    callback();\n"
"    done();\n"
"  }\n"
");\n"
"\n"
"animation1.play(); // Run the animation"
msgstr ""
"let animation1 = animit(myElement) // 与えられた要素に対するアニメーションを"
"定義\n"
"  .saveStyle() // 要素が元々持っていたスタイルを保存\n"
"  .queue({ // アニメーションの初期状態（位置・スタイル）を設定\n"
"    css: {\n"
"      transform: 'translate3D(0, 100%, 0)'\n"
"    },\n"
"    duration: 0\n"
"  })\n"
"  .wait(0.2) // トランジション開始前にディレイ（遅延）を適用\n"
"  .queue({ // アニメーションの次の状態を設定\n"
"    css: {\n"
"      transform: 'translate3D(0, 0, 0)',\n"
"    },\n"
"    duration: 0.6,\n"
"    timing: 'linear'\n"
"  })\n"
"  .restoreStyle() // 要素が元々持っていたスタイルを復元\n"
"  .queue(done => { // トランジション終了時にコールバック関数を呼ぶ（オプショ"
"ン）\n"
"    callback();\n"
"    done();\n"
"  }\n"
");\n"
"\n"
"animation1.play(); // アニメーションを再生"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:109
msgid ""
"Since Animit modifies the element's `style` property, it provides "
"`saveStyle()` and `restoreStyle()` methods to ensure the previous styles are "
"not lost. `queue({css: {...}, duration: 0, timing: 'linear'})` or "
"`queue({...}, {duration: 0, timing: 'linear'})` method is provided to add "
"transitions to the queue. The first one will be the first style applied in "
"the animation that will transition into the following styles. In the "
"provided example, we are moving a new page inside the view from right to "
"left. Therefore, it needs to start at position `translate3d(0, 100%, 0)` and "
"move to `translate3d(0, 0, 0)`. Method `wait(...)` can be used to apply a "
"delay between transitions. Finally, we can optionally call "
"`queue(function(done) { ...; done(); })` again to run a callback if "
"necessary."
msgstr ""
"Animitは要素の`style`プロパティを操作するので、以前のスタイルを失ってしまわな"
"いようにするために`saveStyle()`と`restoreStyle()`の2つのメソッドを提供してい"
"ます。`queue({css: {...}, duration: 0, timing: 'linear'})`または"
"`queue({...}, {duration: 0, timing: 'linear'})`メソッドはアニメーションの"
"キューにトランジションを追加します。アニメーションを再生すると、まずキューの"
"先頭のトランジションが適用され、その後キューの残りのトランジションが適用され"
"ていきます。上述のサンプルコードでは、新しいページを右から左に向かってビュー"
"内に移動させています。`translate3d(0, 100%, 0)`という位置から始まって"
"`translate3d(0, 0, 0)`という位置に移動しているのはそのためです。`wait(...)`メ"
"ソッドはトランジション間のディレイ（遅延）を入れるのに利用できます。最後に"
"`queue(function(done) { ...; done(); })`メソッドについてですが、これは必要に"
"応じてコールバック関数を呼び出すのに利用できます。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:110
msgid ""
"It is also possible to pass an array of HTML elements to `animit` if "
"performing the same animation on multiple elements is required: "
"`animit([el1, el2]).saveStyle()...`."
msgstr ""
"もし同じアニメーションを複数の要素に適用する必要があるときは、`animit([el1, "
"el2]).saveStyle()...`のように、`animit`オブジェクトにHTML要素の配列を渡すこと"
"も可能です。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:111
msgid ""
"It is very common to have more than one animation running at the same time. "
"`animit.runAll(animation1, animation2, animation3);` method can be used for "
"this behavior instead of `animation1.play(); animation2.play(); animation3."
"play();`."
msgstr ""
"また、2つ以上のアニメーションを同時に再生したい場合は、`animation1.play(); "
"animation2.play(); animation3.play();`とする代わりに`animit."
"runAll(animation1, animation2, animation3);`メソッドが利用できますので、活用"
"してください。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:112
msgid "Creating animators"
msgstr "アニメーターを作成する"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:113
msgid ""
"Animators can be created from scratch by extending the necessary animator "
"classes that Onsen UI provides. Every component exposes a minimum animator "
"interface that must be extended and implemented: `NavigatorAnimator`, "
"`AlertDialogAnimator`, `DialogAnimator`, `PopoverAnimator`, `ModalAnimator`, "
"`TabbarAnimator` and `SplitterAnimator`. This is the desired way to "
"implement animators if you want to build a custom version of Onsen UI or "
"want to make a pull request to the repository. For more information, please "
"have a look at the [existing animators](https://github.com/OnsenUI/OnsenUI/"
"tree/master/core/src/elements) for every component."
msgstr ""
"アニメーターはOnsen UIが提供しているアニメータークラスを拡張することで一から"
"作成することができます。Onsen UIの各コンポーネントは`NavigatorAnimator`と"
"`AlertDialogAnimator`、`DialogAnimator`、`PopoverAnimator`、`ModalAnimator`、"
"`TabbarAnimator`、`SplitterAnimator`のようなアニメーターインターフェースを公"
"開（expose）しています。これらを拡張・実装することでアニメーターを作成するこ"
"とができます。もしあなたがOnsen UIを改造したり、Onsen UIのリポジトリにプルリ"
"クエストを送ってみたい場合には、この方法でアニメーターを実装するのが最も理想"
"的です。詳しくは、各コンポーネントの[既存のアニメーターのソースコード]"
"(https://github.com/OnsenUI/OnsenUI/tree/master/core/src/elements)をご覧くだ"
"さい。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:114
msgid ""
"ES2015 (ES6) is preferred but not strictly required for this to work. An "
"example in ES5 can be found [here](https://codepen.io/frankdiox/pen/kXJvQL?"
"editors=1010)."
msgstr ""
"アニメーターを作成する際はES2015 (ES6)を利用するのが推奨されますが、特にこだ"
"わる必要はありません。ES5でのサンプルコードについては[こちら](https://"
"codepen.io/frankdiox/pen/kXJvQL?editors=1010)をご覧ください。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:115
msgid "Extending animators"
msgstr "アニメーターを拡張する"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:116
msgid ""
"A way to make new animators is extending an existing animator and modifiying "
"part of its behavior (or all). This is in general easier if you just want to "
"tweak the appearance or timing, or even if you want to create a whole new "
"thing starting from another animator. For this it is also required to have a "
"look at the [existing animators](https://github.com/OnsenUI/OnsenUI/tree/"
"master/core/src/elements), choose one and check its properties and methods. "
"Every animator provides a `extend({...})` class method that returns a new "
"animator. Animators are exposed in every component class: `ons.elements."
"Navigator.animators` or `ons.elements.AlertDialog.animators` are some "
"examples. These objects contain all the registered animators and can be "
"extended as follows."
msgstr ""
"新しいアニメーターを作成する方法には、既存のアニメーターを拡張して挙動の一部"
"または全部を修正するという方法もあります。もし、ただ単に既存のアニメーターの"
"見た目やタイミングを少し修正したいだけならこちらの方法の方が簡単です。完全に"
"新しいアニメーターを作る場合でも、こちらの方法の方が簡単です。既存のアニメー"
"ターを拡張するには、[既存のアニメーターのソースコード](https://github.com/"
"OnsenUI/OnsenUI/tree/master/core/src/elements)のどれかを1つ選んで一通り目を通"
"し、プロパティとメソッドを確認することがまず必要です。アニメーターの具体的な"
"仕様についてですが、どのアニメーターも、新しいアニメーターを返す"
"`extend({...})`クラスメソッドを提供しています。各コンポーネントの既存のアニ"
"メーターは`ons.elements.Navigator.animators`や`ons.elements.AlertDialog."
"animators`などの形で公開（expose）されています。これらのオブジェクトはコン"
"ポーネントに登録済みの全てのアニメーターを含んでおり、以下のように拡張できま"
"す。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:117
msgid ""
"var fadeIOS = ons.elements.Navigator.animators['fade-ios'];\n"
"var customAnimator = fadeIOS.extend({\n"
"  timing: 'cubic-bezier(.1, .7, .1, 1)',\n"
"  delay: 0.1,\n"
"  push: function(enterPage, leavePage, callback) {\n"
"    ons.animit.runAll(\n"
"      ons.animit(enterPage)...,\n"
"      ons.animit(leavePage)...\n"
"    );\n"
"  }\n"
"});\n"
"\n"
"// This step is mandatory\n"
"ons.elements.Navigator.registerAnimator('customAnimationName', "
"customAnimator);"
msgstr ""
"var fadeIOS = ons.elements.Navigator.animators['fade-ios'];\n"
"var customAnimator = fadeIOS.extend({\n"
"  timing: 'cubic-bezier(.1, .7, .1, 1)',\n"
"  delay: 0.1,\n"
"  push: function(enterPage, leavePage, callback) {\n"
"    ons.animit.runAll(\n"
"      ons.animit(enterPage)...,\n"
"      ons.animit(leavePage)...\n"
"    );\n"
"  }\n"
"});\n"
"\n"
"// 以下の処理は任意です\n"
"ons.elements.Navigator.registerAnimator('customAnimationName', "
"customAnimator);"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:118
msgid ""
"This overwrites the `push` animation but uses the original `pop` animation. "
"`timing` and `delay` properties will still affect both animations. Some "
"animators have extra properties, such as `backgroundMask`. Please check the "
"animator you want to extend to see all the properties."
msgstr ""
"上記のサンプルコードでは、`push`アニメーションを上書きしています。`pop`アニ"
"メーションは既存のものがそのまま使用されます。 ここで、`timing`と`delay`プロ"
"パティは`push`アニメーションと`pop`のアニメーションの両方に影響しています。い"
"くつかのアニメーターは`backgroundMask`のような追加プロパティを持っています。"
"使用可能な追加プロパティを確認するには、拡張したいアニメーターのソースコード"
"を確認してください。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:119
msgid ""
"After the new animator is created and registered, we can simply specify the "
"animation with its name: `myNavigator.pushPage('page.html', {animation: "
"'customAnimationName'})`. Or make it default: `<ons-navigator animation="
"\"customAnimationName\">`. The same applies to the other components."
msgstr ""
"新しいアニメーターを作成して登録すると、`myNavigator.pushPage('page.html', "
"{animation: 'customAnimationName'})`のように、カスタムアニメーションを登録時"
"のアニメーション名だけで簡単に参照できるようになります。`<ons-navigator "
"animation=\"customAnimationName\">`のように、カスタムアニメーションをナビゲー"
"ターのデフォルトのアニメーションにするというようなことも可能です。これは他の"
"コンポーネントについても同様です。"

#: /p/gh/OnsenUI/onsen.io/src/documents_en/v2/guide/theming.html:120
msgid "<% end %>"
msgstr "<% end %>"
